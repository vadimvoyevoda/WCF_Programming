//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client_Mex_DiskInfoAsync.DiskInfoAsync {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyDiskInfo", Namespace="http://schemas.datacontract.org/2004/07/Service_MyDiskInfo")]
    [System.SerializableAttribute()]
    public partial class MyDiskInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AvailableFreeSpaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DiskNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.DriveType DiskTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FreeSpaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TotalSpaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client_Mex_DiskInfoAsync.DiskInfoAsync.User userField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AvailableFreeSpace {
            get {
                return this.AvailableFreeSpaceField;
            }
            set {
                if ((object.ReferenceEquals(this.AvailableFreeSpaceField, value) != true)) {
                    this.AvailableFreeSpaceField = value;
                    this.RaisePropertyChanged("AvailableFreeSpace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DiskName {
            get {
                return this.DiskNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DiskNameField, value) != true)) {
                    this.DiskNameField = value;
                    this.RaisePropertyChanged("DiskName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.DriveType DiskType {
            get {
                return this.DiskTypeField;
            }
            set {
                if ((this.DiskTypeField.Equals(value) != true)) {
                    this.DiskTypeField = value;
                    this.RaisePropertyChanged("DiskType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FreeSpace {
            get {
                return this.FreeSpaceField;
            }
            set {
                if ((object.ReferenceEquals(this.FreeSpaceField, value) != true)) {
                    this.FreeSpaceField = value;
                    this.RaisePropertyChanged("FreeSpace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TotalSpace {
            get {
                return this.TotalSpaceField;
            }
            set {
                if ((object.ReferenceEquals(this.TotalSpaceField, value) != true)) {
                    this.TotalSpaceField = value;
                    this.RaisePropertyChanged("TotalSpace");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client_Mex_DiskInfoAsync.DiskInfoAsync.User user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Service_MyDiskInfo")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Client_Mex_DiskInfoAsync.DiskInfoAsync.UserType typeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Client_Mex_DiskInfoAsync.DiskInfoAsync.UserType type {
            get {
                return this.typeField;
            }
            set {
                if ((this.typeField.Equals(value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserType", Namespace="http://schemas.datacontract.org/2004/07/Service_MyDiskInfo")]
    public enum UserType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Student = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Teacher = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Admin = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DiskInfoAsync.IDiskInfo")]
    public interface IDiskInfo {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskInfo/DiskSpaces", ReplyAction="http://tempuri.org/IDiskInfo/DiskSpacesResponse")]
        Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo DiskSpaces(string diskName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiskInfo/DiskSpaces", ReplyAction="http://tempuri.org/IDiskInfo/DiskSpacesResponse")]
        System.IAsyncResult BeginDiskSpaces(string diskName, System.AsyncCallback callback, object asyncState);
        
        Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo EndDiskSpaces(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDiskInfo/DiskSpacesWithDescription", ReplyAction="http://tempuri.org/IDiskInfo/DiskSpacesWithDescriptionResponse")]
        Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo DiskSpacesWithDescription(string diskName, string description);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IDiskInfo/DiskSpacesWithDescription", ReplyAction="http://tempuri.org/IDiskInfo/DiskSpacesWithDescriptionResponse")]
        System.IAsyncResult BeginDiskSpacesWithDescription(string diskName, string description, System.AsyncCallback callback, object asyncState);
        
        Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo EndDiskSpacesWithDescription(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDiskInfoChannel : Client_Mex_DiskInfoAsync.DiskInfoAsync.IDiskInfo, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiskSpacesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DiskSpacesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiskSpacesWithDescriptionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DiskSpacesWithDescriptionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DiskInfoClient : System.ServiceModel.ClientBase<Client_Mex_DiskInfoAsync.DiskInfoAsync.IDiskInfo>, Client_Mex_DiskInfoAsync.DiskInfoAsync.IDiskInfo {
        
        private BeginOperationDelegate onBeginDiskSpacesDelegate;
        
        private EndOperationDelegate onEndDiskSpacesDelegate;
        
        private System.Threading.SendOrPostCallback onDiskSpacesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDiskSpacesWithDescriptionDelegate;
        
        private EndOperationDelegate onEndDiskSpacesWithDescriptionDelegate;
        
        private System.Threading.SendOrPostCallback onDiskSpacesWithDescriptionCompletedDelegate;
        
        public DiskInfoClient() {
        }
        
        public DiskInfoClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DiskInfoClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiskInfoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DiskInfoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<DiskSpacesCompletedEventArgs> DiskSpacesCompleted;
        
        public event System.EventHandler<DiskSpacesWithDescriptionCompletedEventArgs> DiskSpacesWithDescriptionCompleted;
        
        public Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo DiskSpaces(string diskName) {
            return base.Channel.DiskSpaces(diskName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDiskSpaces(string diskName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDiskSpaces(diskName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo EndDiskSpaces(System.IAsyncResult result) {
            return base.Channel.EndDiskSpaces(result);
        }
        
        private System.IAsyncResult OnBeginDiskSpaces(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string diskName = ((string)(inValues[0]));
            return this.BeginDiskSpaces(diskName, callback, asyncState);
        }
        
        private object[] OnEndDiskSpaces(System.IAsyncResult result) {
            Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo retVal = this.EndDiskSpaces(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDiskSpacesCompleted(object state) {
            if ((this.DiskSpacesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DiskSpacesCompleted(this, new DiskSpacesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DiskSpacesAsync(string diskName) {
            this.DiskSpacesAsync(diskName, null);
        }
        
        public void DiskSpacesAsync(string diskName, object userState) {
            if ((this.onBeginDiskSpacesDelegate == null)) {
                this.onBeginDiskSpacesDelegate = new BeginOperationDelegate(this.OnBeginDiskSpaces);
            }
            if ((this.onEndDiskSpacesDelegate == null)) {
                this.onEndDiskSpacesDelegate = new EndOperationDelegate(this.OnEndDiskSpaces);
            }
            if ((this.onDiskSpacesCompletedDelegate == null)) {
                this.onDiskSpacesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDiskSpacesCompleted);
            }
            base.InvokeAsync(this.onBeginDiskSpacesDelegate, new object[] {
                        diskName}, this.onEndDiskSpacesDelegate, this.onDiskSpacesCompletedDelegate, userState);
        }
        
        public Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo DiskSpacesWithDescription(string diskName, string description) {
            return base.Channel.DiskSpacesWithDescription(diskName, description);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDiskSpacesWithDescription(string diskName, string description, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDiskSpacesWithDescription(diskName, description, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo EndDiskSpacesWithDescription(System.IAsyncResult result) {
            return base.Channel.EndDiskSpacesWithDescription(result);
        }
        
        private System.IAsyncResult OnBeginDiskSpacesWithDescription(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string diskName = ((string)(inValues[0]));
            string description = ((string)(inValues[1]));
            return this.BeginDiskSpacesWithDescription(diskName, description, callback, asyncState);
        }
        
        private object[] OnEndDiskSpacesWithDescription(System.IAsyncResult result) {
            Client_Mex_DiskInfoAsync.DiskInfoAsync.MyDiskInfo retVal = this.EndDiskSpacesWithDescription(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDiskSpacesWithDescriptionCompleted(object state) {
            if ((this.DiskSpacesWithDescriptionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DiskSpacesWithDescriptionCompleted(this, new DiskSpacesWithDescriptionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DiskSpacesWithDescriptionAsync(string diskName, string description) {
            this.DiskSpacesWithDescriptionAsync(diskName, description, null);
        }
        
        public void DiskSpacesWithDescriptionAsync(string diskName, string description, object userState) {
            if ((this.onBeginDiskSpacesWithDescriptionDelegate == null)) {
                this.onBeginDiskSpacesWithDescriptionDelegate = new BeginOperationDelegate(this.OnBeginDiskSpacesWithDescription);
            }
            if ((this.onEndDiskSpacesWithDescriptionDelegate == null)) {
                this.onEndDiskSpacesWithDescriptionDelegate = new EndOperationDelegate(this.OnEndDiskSpacesWithDescription);
            }
            if ((this.onDiskSpacesWithDescriptionCompletedDelegate == null)) {
                this.onDiskSpacesWithDescriptionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDiskSpacesWithDescriptionCompleted);
            }
            base.InvokeAsync(this.onBeginDiskSpacesWithDescriptionDelegate, new object[] {
                        diskName,
                        description}, this.onEndDiskSpacesWithDescriptionDelegate, this.onDiskSpacesWithDescriptionCompletedDelegate, userState);
        }
    }
}
